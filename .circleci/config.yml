version: 2.1

orbs:
  slack: circleci/slack@3.4.2

aliases:
  - &node_version circleci/node:12

  # Common steps
  - &install_dependencies
    run:
      name: Install NPM dependencies
      command: npm install && npm rebuild node-sass
  - &restore_cache
    restore_cache:
      name: Restore NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
  - &save_cache
    save_cache:
      name: Save NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules
  - &notify_slack
    slack/notify-on-failure:
      only_for_branches: master

references:
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move

commands:
  build_for_k8s:
    description: 'Builds a Docker image for staging/production and pushes to ECR'
    parameters:
      env:
        type: string
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push docker image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"

  deploy_to_k8s:
    description: 'Deploys a previously built Docker image to staging/production k8s environment'
    parameters:
      env:
        type: string
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.env >>

      - deploy:
          name: rolling update image to << parameters.env >>
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

jobs:
  build_and_test:
    docker:
      - image: *node_version
    steps:
      - checkout
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Lint the code
          command: npm run circle:lint
      - run:
          name: Setup Code Climate test-reporter
          # download test reporter as a static binary
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Notify CodeClimate before build
          command: |
            ./cc-test-reporter before-build
          when: always
      - run:
          name: Run unit tests
          command: |
            npm run circle:coverage
      - run:
          name: Upload coverage to CodeClimate
          command: |
            ./cc-test-reporter after-build
          when: always
      - run:
          name: Build the app
          command: NODE_ENV=production npm run build
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: coverage
      - *notify_slack

  e2e_test:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Run E2E tests
          command: npm run test-e2e:ci
      - store_test_results:
          path: reports/testcafe
      - store_artifacts:
          path: artifacts
      - *notify_slack


  build_staging:
    <<: *cloud_container
    steps:
      - build_for_k8s:
          env: 'staging'

  deploy_staging:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
          env: 'staging'

  build_preprod:
    <<: *cloud_container
    steps:
      - build_for_k8s:
          env: 'preprod'

  deploy_preprod:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
          env: 'preprod'

  build_production:
    <<: *cloud_container
    steps:
      - build_for_k8s:
          env: 'production'

  deploy_production:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
          env: 'production'

workflows:
  pecs-frontend:
    jobs:
      - build_and_test
      - build_staging:
          requires:
            - build_and_test
          filters:
            branches:
              only: master
      - build_preprod:
          requires:
            - build_and_test
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - build_staging
      - deploy_preprod:
          requires:
            - build_preprod
            - e2e_test
      - e2e_test:
          requires:
            - deploy_staging
      - build_production:
          requires:
            - build_and_test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - hold_production:
          type: approval
          requires:
            - build_production
            - e2e_test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - deploy_production:
          requires:
            - hold_production
