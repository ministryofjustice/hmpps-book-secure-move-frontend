version: 2.1

orbs:
  node: circleci/node@4.3.0
  browser-tools: circleci/browser-tools@1.1.3
  slack: circleci/slack@4.3.0
  hmpps: ministryofjustice/hmpps@3.0.4

commands:
  export_kube_vars:
    description: "Exports kube vars for the chosen environment and cluster."
    parameters:
      env:
        type: string
      cluster:
        type: string
        default: "live"
    steps:
      - run:
          name: Export kubernetes env vars
          command: |
            ENV_UPCASED=$(echo "<< parameters.env >>" | tr '[:lower:]' '[:upper:]')
            [[ "<< parameters.cluster >>" = "live" ]] && CLUSTER_SUFFIX="_LIVE"

            CLUSTER_VAR="KUBE_CLUSTER${CLUSTER_SUFFIX}"
            CACERT_VAR="KUBE_ENV_${ENV_UPCASED}_CACERT${CLUSTER_SUFFIX}"
            NAME_VAR="KUBE_ENV_${ENV_UPCASED}_NAME"
            NAMESPACE_VAR="KUBE_ENV_${ENV_UPCASED}_NAMESPACE"
            TOKEN_VAR="KUBE_ENV_${ENV_UPCASED}_TOKEN${CLUSTER_SUFFIX}"

            echo "export KUBE_CLUSTER=\"${!CLUSTER_VAR}\"" >> $BASH_ENV
            echo "export KUBE_CACERT=\"${!CACERT_VAR}\"" >> $BASH_ENV
            echo "export KUBE_NAME=\"${!NAME_VAR}\"" >> $BASH_ENV
            echo "export KUBE_NAMESPACE=\"${!NAMESPACE_VAR}\"" >> $BASH_ENV
            echo "export KUBE_TOKEN=\"${!TOKEN_VAR}\"" >> $BASH_ENV

aliases:
  # Shared containers
  - &circle_container
    docker:
      - image: cimg/node:16.13.1-browsers
  - &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move
  # Common steps
  - &install_dependencies
    run:
      name: Install NPM dependencies
      command: npm install && npm rebuild node-sass
  - &restore_cache
    restore_cache:
      name: Restore NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
  - &save_cache
    save_cache:
      name: Save NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules
  - &set_package_version
    run:
      name: Set version
      command: |
        echo "export PACKAGE_VERSION=$(grep -m1 version package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')" >> $BASH_ENV
  - &notify_slack_on_failure
    slack/notify:
      event: fail
      branch_pattern: main
  - &notify_slack_on_release_start
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      custom: '{
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Frontend v${PACKAGE_VERSION} is being prepared for release* :building_construction:"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "@here A new release was created by ${CIRCLE_USERNAME}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Changelog"
                    },
                    "url": "https://github.com/ministryofjustice/hmpps-book-secure-move-frontend/blob/main/CHANGELOG.md"
                  }
                ]
              }
            ]
          }'
  - &notify_slack_of_approval
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      custom: '{
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Frontend v${PACKAGE_VERSION} *requires your approval* before it can be deployed :eyes:"
                },
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "${BUILD_NOTIFICATIONS_MENTION_ID}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Workflow"
                    },
                    "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                  }
                ]
              }
            ]
          }'
  - &notify_slack_on_release_end
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      custom: '{
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Frontend v${PACKAGE_VERSION} has been deployed* :rocket:"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "@here This release was successfully deployed to production"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Release"
                    },
                    "url": "https://github.com/ministryofjustice/hmpps-book-secure-move-frontend/releases/tag/v${PACKAGE_VERSION}"
                  }
                ]
              }
            ]
          }'
  # Common filters
  - &all_tags
    filters:
      tags:
        only: /.*/
  - &only_main
    filters:
      branches:
        only: main
  - &ignore_main
    filters:
      branches:
        ignore: main
  - &only_main_and_tags
    filters:
      tags:
        only: /.*/
      branches:
        only: main
  - &only_deploy_tags
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/
  - &requires_production_approval
    requires:
      - approval

jobs:
  notify-of-approval:
    <<: *circle_container
    steps:
      - checkout
      - *set_package_version
      - *notify_slack_of_approval

  lint-and-unit-test:
    <<: *circle_container
    steps:
      - checkout
      - *set_package_version
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Lint the code
          command: npm run circle:lint
      - run:
          name: Setup Code Climate test-reporter
          # download test reporter as a static binary
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-0.8.0-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Notify CodeClimate before build
          command: |
            ./cc-test-reporter before-build
          when: always
      - run:
          name: Run unit tests
          command: |
            npm run circle:coverage
      - run:
          name: Upload coverage to CodeClimate
          command: |
            ./cc-test-reporter after-build
          when: always
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - run:
          name: Compress Coverage
          command: tar -cvzf coverage.tar coverage
      - store_artifacts:
          path: coverage.tar
      - *notify_slack_on_failure

  end-to-end-test:
    <<: *circle_container
    resource_class: xlarge
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - *set_package_version
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Build assets and frameworks
          command: npm run build
      - run:
          name: Check whether to use mock server
          command: |
            if [ -n "$E2E_MOCK_AUTH" ]; then
              echo "export AUTH_PROVIDER_URL='http://localhost:3999'" >> $BASH_ENV
              echo "export NOMIS_ELITE2_API_URL='http://localhost:3999'" >> $BASH_ENV
              source $BASH_ENV
            fi
      - run:
          name: Run E2E tests (same instance)
          environment:
            REDIS_URL: ""
            SERVER_HOST: localhost:3000
            E2E_BASE_URL: http://localhost:3000
            NODE_OPTIONS: --max-old-space-size=12288
          command: |
            npm run test-e2e:ci
      - store_test_results:
          path: reports/testcafe
      - store_artifacts:
          path: artifacts
      - *notify_slack_on_failure

  publish-release-to-sentry:
    <<: *circle_container
    parameters:
      sentry_env:
        type: string
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT
          environment:
            SENTRY_ENVIRONMENT: <<parameters.sentry_env>>

  build-docker-image:
    <<: *cloud_container
    parameters:
      uat:
        type: string
        default: ""
      staging:
        type: string
        default: ""
      preprod:
        type: string
        default: ""
      production:
        type: string
        default: ""
    steps:
      - checkout
      - *set_package_version
      - when:
          condition: <<parameters.production>>
          steps:
            - *notify_slack_on_release_start
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BUILD_NUM} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              --build-arg APP_BUILD_BRANCH=${CIRCLE_BRANCH} \
              -t app .
      - run:
          name: Login to ECR
          command: |
            $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
      - run:
          name: Push docker image to ECR
          command: |
            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
      - when:
          condition: <<parameters.staging>>
          steps:
            - run:
                name: Push staging docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"
      - when:
          condition: <<parameters.uat>>
          steps:
            - run:
                name: Push staging docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:uat.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:uat.latest"
      - when:
          condition: <<parameters.preprod>>
          steps:
            - run:
                name: Push preproduction docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:preprod.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:preprod.latest"
      - when:
          condition: <<parameters.production>>
          steps:
            - run:
                name: Push production docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

  deploy:
    <<: *cloud_container
    parameters:
      env:
        type: string
      cluster:
        type: string
        default: "live"
      notify_slack:
        type: string
        default: ""
    steps:
      - checkout
      - *set_package_version
      - export_kube_vars:
          env: << parameters.env >>
          cluster: << parameters.cluster >>
      - run:
          name: Authenticate with cluster
          command: |
            echo -n $KUBE_CACERT | base64 -d > ./ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
            kubectl config set-credentials circleci --token=${KUBE_TOKEN}
            kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=circleci --namespace=${KUBE_NAMESPACE}
            kubectl config use-context ${KUBE_CLUSTER}
      - deploy:
          name: Deploy image to << parameters.env >> on << parameters.cluster >> cluster
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"
      - when:
          condition: <<parameters.notify_slack>>
          steps:
            - *notify_slack_on_release_end

workflows:
  continuous-deployment:
    jobs:
      # Tests
      - lint-and-unit-test:
          context:
            - hmpps-common-vars
          <<: *all_tags
      - end-to-end-test:
          context:
            - hmpps-common-vars
          <<: *ignore_main
          name: end-to-end-test-pr
      - end-to-end-test:
          context:
            - hmpps-common-vars
          <<: *only_main
          name: end-to-end-test-main
      - end-to-end-test:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          name: end-to-end-test-release
      # Docker builds
      - build-docker-image:
          context:
            - hmpps-common-vars
          <<: *only_main
          name: build-docker-image-main
          staging: 'true'
      - build-docker-image:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          name: build-docker-image-release
          uat: 'true'
          preprod: 'true'
          production: 'true'
      # Deployment
      - deploy:
          context:
            - hmpps-common-vars
          <<: *only_main
          name: deploy-staging
          env: 'staging'
          requires:
            - build-docker-image-main
            - end-to-end-test-main
            - lint-and-unit-test
      - deploy:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          name: deploy-preproduction
          env: 'preprod'
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      - deploy:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          name: deploy-uat
          env: 'uat'
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      - deploy:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          <<: *requires_production_approval
          name: deploy-production
          env: 'production'
          notify_slack: 'true'
      # Production approval
      - approval:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          type: approval
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      - notify-of-approval:
          context:
            - hmpps-common-vars
          <<: *only_deploy_tags
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      # Post release
      - publish-release-to-sentry:
          <<: *only_main
          name: publish-release-to-sentry-staging
          sentry_env: staging
          requires:
            - deploy-staging
      - publish-release-to-sentry:
          <<: *only_deploy_tags
          name: publish-release-to-sentry-uat
          sentry_env: uat
          requires:
            - deploy-uat
      - publish-release-to-sentry:
          <<: *only_deploy_tags
          name: publish-release-to-sentry-preprod
          sentry_env: preproduction
          requires:
            - deploy-preproduction
      - publish-release-to-sentry:
          <<: *only_deploy_tags
          name: publish-release-to-sentry-production
          sentry_env: production
          requires:
            - deploy-production
