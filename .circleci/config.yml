version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.1
  slack: circleci/slack@4.12.1
  hmpps: ministryofjustice/hmpps@7.2.1
  kubernetes: circleci/kubernetes@1.3.1
  mem: circleci/rememborb@0.0.2

aliases:
  # Shared containers
  - &node_container
    executor:
      name: hmpps/node
      tag: 18.14-browsers
  # Common steps
  - &install_dependencies
    run:
      name: Install NPM dependencies
      command: npm install && npm rebuild node-sass
  - &restore_cache
    restore_cache:
      name: Restore NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
  - &save_cache
    save_cache:
      name: Save NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules
  - &set_package_version
    run:
      name: Set version
      command: |
        echo "export PACKAGE_VERSION=$(grep -m1 version package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')" >> $BASH_ENV
  # Common filters
  - &only_main
    filters:
      branches:
        only:
          - main
          - P4-3763/DPS-like-ci-pipeline-3
jobs:
  build:
    <<: *node_container
    steps:
      - checkout
      - *set_package_version
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Write eslintignore
          command: npx tsc --listFilesOnly | grep -v 'node_modules' | sed 's/\.ts/\.js/' | sed "s#$(pwd)/##" > ./.eslintignore
      - run:
          name: Lint the code
          command: npm run circle:lint
      - run:
          name: Compile typescript
          command: npx tsc --project ./
      - run:
          name: Build assets and frameworks
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build
  lint:
    <<: *node_container
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *restore_cache
      - run:
          name: Lint the code
          command: npm run circle:lint
      - store_artifacts:
          path: ./reports/eslint/eslint.xml
          destination: lint-report

      #Can't lint helm until we have charts
      #- hmpps/helm_lint

  unit-test:
    <<: *node_container
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run unit tests
          command: |
            npm run circle:coverage
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - run:
          name: Compress Coverage
          command: tar -cvzf coverage.tar coverage
      - store_artifacts:
          path: coverage.tar

  end-to-end-test:
    <<: *node_container
    resource_class: large
    parallelism: 8
    steps:
      - attach_workspace:
          at: .
      - browser-tools/install-browser-tools
      - run:
          name: Run E2E tests (same instance)
          environment:
            REDIS_URL: ""
            NODE_OPTIONS: --max-old-space-size=12288
          command: |
            npm run test-e2e -- --test $(circleci tests glob "test/e2e/**/*.test.js" | circleci tests split --split-by=timings)
      - run:
          name: Convert testcafe reports to relative path
          command: sed -i 's/\/home\/circleci\/project\///g' reports/testcafe/*.xml
      - store_test_results:
          path: reports/testcafe
      - store_artifacts:
          path: artifacts
  build_docker:
        description: |
            Build docker image, also creates an app version string and pushes image to repo.
        <<: *node_container
        parameters:
            additional_docker_build_args:
                default: ""
                type: string
            additional_docker_tag:
                default: ""
                description: Additional docker tag that can be used to specify stable tags
                type: string
            dockerfile_dir:
                default: .
                type: string
            git-lfs:
                default: false
                type: boolean
            image_name:
                default: quay.io/hmpps/${CIRCLE_PROJECT_REPONAME}
                type: string
            jira_update:
                default: false
                description: When true, updates any referenced Jira tickets with build status. Note that Jira integration must be enabled in your CircleCI project settings.
                type: boolean
            no_output_timeout:
                default: 30m
                description: Configure the no_output_timeout setting for the container build step
                type: string
            persist_container_image:
                default: false
                description: Make the built container image available for subsequent jobs
                type: boolean
            publish:
                default: true
                type: boolean
        steps:
            - checkout
            - run:
                name: Compile typescript
                command: npx tsc --project ./
            - setup_remote_docker:
                docker_layer_caching: true
            - hmpps/create_app_version
            - run:
                command: |
                    IMAGE_NAME="<< parameters.image_name >>"
                    echo "export IMAGE_NAME=$IMAGE_NAME" >> $BASH_ENV
                name: Create IMAGE_NAME env var
            - mem/remember:
                env_var: IMAGE_NAME
                value: ${IMAGE_NAME}
            - run:
                command: |
                    docker build --pull \
                      --rm=false << parameters.dockerfile_dir >> \
                      --build-arg BUILD_NUMBER=$APP_VERSION \
                      --build-arg GIT_REF=$CIRCLE_SHA1 \
                      --tag "${IMAGE_NAME}:${APP_VERSION}" \
                      --label "maintainer=dps-hmpps@digital.justice.gov.uk" \
                      --label "app.version=${APP_VERSION}" \
                      --label "build.version=${APP_VERSION}" \
                      --label "build.number=${CIRCLE_BUILD_NUM}" \
                      --label "build.url=${CIRCLE_BUILD_URL}" \
                      --label "build.gitref=${CIRCLE_SHA1}" \
                      << parameters.additional_docker_build_args >>
                name: Build container image
                no_output_timeout: << parameters.no_output_timeout >>
            - when:
                condition: << parameters.persist_container_image >>
                steps:
                    - run:
                        command: |
                            mkdir -p docker_cache
                            docker save ${IMAGE_NAME}:${APP_VERSION} -o docker_cache/build_image.tar
                        name: Persist container image to workspace
                    - persist_to_workspace:
                        paths:
                            - docker_cache
                        root: ~/app
            - when:
                condition: <<parameters.publish>>
                steps:
                    - run:
                        command: |
                            #push to quay.io
                            docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
                            docker tag "<< parameters.image_name >>:${APP_VERSION}" "<< parameters.image_name >>:latest"
                            docker push "<< parameters.image_name >>:${APP_VERSION}"
                            docker push "<< parameters.image_name >>:latest"
                            TAG="<< parameters.additional_docker_tag >>"
                            echo "export TAG=$TAG" >> $BASH_ENV
                            NUM=$(echo -n $TAG | wc -c)
                            echo "export NUM=$NUM" >> $BASH_ENV
                            if [ $NUM -gt 0 ]; then
                              docker tag "<< parameters.image_name >>:${APP_VERSION}" "<< parameters.image_name >>:<< parameters.additional_docker_tag >>"
                              docker push "<< parameters.image_name >>:<< parameters.additional_docker_tag >>"
                            fi
                        name: Publish image to repository
    
workflows:
  continuous-deployment:
    jobs:
      # Tests
      - build
      - lint:
          requires:
            - build
      - hmpps/helm_lint:
          name: helm_lint
          requires:
            - build
      - unit-test:
          requires:
            - build
      - end-to-end-test:
          name: end-to-end-test
          requires:
            - build
      - build_docker:
          <<: *only_main
          name: build-docker-image
          requires:
            - build
      # Deployment
      - hmpps/deploy_env:
          name: deploy-staging
          env: 'staging'
          helm_timeout: 5m
          <<: *only_main
          context:
            - hmpps-common-vars
            - basm-fe-staging
          requires:
            - build-docker-image
            # - end-to-end-test
            - lint
      - hmpps/deploy_env:
          <<: *only_main
          name: deploy-preprod
          env: 'preprod'
          requires:
            - preprod-approval
      - hmpps/deploy_env:
          <<: *only_main
          name: deploy-uat
          env: 'uat'
          requires:
            - uat-approval
      - hmpps/deploy_env:
          <<: *only_main
          name: deploy-production
          env: 'production'
          slack_notification: true
          slack_channel_name: pecs-dev
          requires:
            - prod-approval

      # Approval gates
      - uat-approval:
          type: approval
          requires:
            - deploy-staging
      - preprod-approval:
          type: approval
          requires:
            - deploy-staging
      - prod-approval:
          type: approval
          requires:
            - deploy-preprod
            - deploy-uat

      # Post release
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-staging
          sentry_project: book-a-secure-move-frontend
          sentry_environment: staging
          sentry_create_release: true
          requires:
            - deploy-staging
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-uat
          sentry_project: book-a-secure-move-frontend
          sentry_environment: uat
          requires:
            - deploy-uat
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-preprod
          sentry_project: book-a-secure-move-frontend
          sentry_environment: preproduction
          requires:
            - deploy-preprod
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-production
          sentry_project: book-a-secure-move-frontend
          sentry_environment: production
          requires:
            - deploy-production
