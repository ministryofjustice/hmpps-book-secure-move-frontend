version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.1
  slack: circleci/slack@4.12.1
  hmpps: ministryofjustice/hmpps@7.2.1
  kubernetes: circleci/kubernetes@1.3.1
commands:
  deploy:
    description: "Exports kube vars for the chosen environment and cluster."
    parameters:
      env:
        type: string
      cluster:
        type: string
        default: "live"
    steps:
      - run:
          command: |
            ENV_UPCASED=$(echo "<< parameters.env >>" | tr '[:lower:]' '[:upper:]')
            [[ "<< parameters.cluster >>" = "live" ]] && CLUSTER_SUFFIX="_LIVE"

            CLUSTER_VAR="KUBE_CLUSTER${CLUSTER_SUFFIX}"
            CACERT_VAR="KUBE_ENV_${ENV_UPCASED}_CACERT${CLUSTER_SUFFIX}"
            NAME_VAR="KUBE_ENV_${ENV_UPCASED}_NAME"
            NAMESPACE_VAR="KUBE_ENV_${ENV_UPCASED}_NAMESPACE"
            TOKEN_VAR="KUBE_ENV_${ENV_UPCASED}_TOKEN${CLUSTER_SUFFIX}"

            echo "export KUBE_ENV_CLUSTER=\"${!CLUSTER_VAR}\"" >> $BASH_ENV
            echo "export KUBE_ENV_CACERT=\"${!CACERT_VAR}\"" >> $BASH_ENV
            echo "export KUBE_ENV_NAME=\"${!NAME_VAR}\"" >> $BASH_ENV
            echo "export KUBE_ENV_NAMESPACE=\"${!NAMESPACE_VAR}\"" >> $BASH_ENV
            echo "export KUBE_ENV_TOKEN=\"${!TOKEN_VAR}\"" >> $BASH_ENV
       - hmpps/deploy_env:
          env: << parameters.env >>
          requires:
            - build-docker-image
            - end-to-end-test
            - lint
aliases:
  # Shared containers
  - &node_container
    executor:
      name: hmpps/node
      tag: 18.14-browsers
  # Common steps
  - &install_dependencies
    run:
      name: Install NPM dependencies
      command: npm install && npm rebuild node-sass
  - &restore_cache
    restore_cache:
      name: Restore NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
  - &save_cache
    save_cache:
      name: Save NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules
  - &set_package_version
    run:
      name: Set version
      command: |
        echo "export PACKAGE_VERSION=$(grep -m1 version package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')" >> $BASH_ENV
  # Common filters
  - &only_main
    filters:
      branches:
        only:
          - main
          - P4-3763/DPS-like-ci-pipeline-3
jobs:
  build:
    <<: *node_container
    steps:
      - checkout
      - *set_package_version
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Write eslintignore
          command: npx tsc --listFilesOnly | grep -v 'node_modules' | sed 's/\.ts/\.js/' | sed "s#$(pwd)/##" > ./.eslintignore
      - run:
          name: Lint the code
          command: npm run circle:lint
      - run:
          name: Compile typescript
          command: npx tsc --project ./
      - run:
          name: Build assets and frameworks
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint:
    <<: *node_container
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *restore_cache
      - run:
          name: Lint the code
          command: npm run circle:lint
      - store_artifacts:
          path: ./reports/eslint/eslint.xml
          destination: lint-report

      #Can't lint helm until we have charts
      #- hmpps/helm_lint

  unit-test:
    <<: *node_container
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run unit tests
          command: |
            npm run circle:coverage
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - run:
          name: Compress Coverage
          command: tar -cvzf coverage.tar coverage
      - store_artifacts:
          path: coverage.tar

  end-to-end-test:
    <<: *node_container
    resource_class: large
    parallelism: 8
    steps:
      - attach_workspace:
          at: .
      - browser-tools/install-browser-tools
      - run:
          name: Run E2E tests (same instance)
          environment:
            REDIS_URL: ""
            NODE_OPTIONS: --max-old-space-size=12288
          command: |
            npm run test-e2e -- --test $(circleci tests glob "test/e2e/**/*.test.js" | circleci tests split --split-by=timings)
      - run:
          name: Convert testcafe reports to relative path
          command: sed -i 's/\/home\/circleci\/project\///g' reports/testcafe/*.xml
      - store_test_results:
          path: reports/testcafe
      - store_artifacts:
          path: artifacts

workflows:
  continuous-deployment:
    jobs:
      # Tests
      - build
      - lint:
          requires:
            - build
      - hmpps/helm_lint:
          name: helm_lint
          requires:
            - build
      - unit-test:
          requires:
            - build
      - end-to-end-test:
          name: end-to-end-test
          requires:
            - build
      - hmpps/build_docker:
          <<: *only_main
          name: build-docker-image
          requires:
            - build
      # Deployment
      - deploy:
          <<: *only_main
          name: deploy-staging
          env: 'staging'
          requires:
            - build-docker-image
            - end-to-end-test
            - lint
      - hmpps/deploy_env:
          <<: *only_main
          name: deploy-preprod
          env: 'preprod'
          requires:
            - preprod-approval
      - hmpps/deploy_env:
          <<: *only_main
          name: deploy-uat
          env: 'uat'
          requires:
            - uat-approval
      - hmpps/deploy_env:
          <<: *only_main
          name: deploy-production
          env: 'production'
          slack_notification: true
          slack_channel_name: pecs-dev
          requires:
            - prod-approval

      # Approval gates
      - uat-approval:
          type: approval
          requires:
            - deploy-staging
      - preprod-approval:
          type: approval
          requires:
            - deploy-staging
      - prod-approval:
          type: approval
          requires:
            - deploy-preprod
            - deploy-uat

      # Post release
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-staging
          sentry_project: book-a-secure-move-frontend
          sentry_environment: staging
          sentry_create_release: true
          requires:
            - deploy-staging
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-uat
          sentry_project: book-a-secure-move-frontend
          sentry_environment: uat
          requires:
            - deploy-uat
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-preprod
          sentry_project: book-a-secure-move-frontend
          sentry_environment: preproduction
          requires:
            - deploy-preprod
      - hmpps/sentry_release_and_deploy:
          <<: *only_main
          name: publish-release-to-sentry-production
          sentry_project: book-a-secure-move-frontend
          sentry_environment: production
          requires:
            - deploy-production
