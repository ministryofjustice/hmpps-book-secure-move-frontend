version: 2.1

aliases:
  - &node_version               circleci/node:11

  # Common steps
  - &install_dependencies
    run:
      name: Install NPM dependencies
      command: npm install
  - &restore_cache
    restore_cache:
      name: Restore NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
  - &save_cache
    save_cache:
      name: Save NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules

references:
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: pecs

commands:
  build_for_k8s:
    description: "Builds a Docker image for staging/production and pushes to ECR"
    parameters:
      env:
        type: string
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push docker image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env >>.latest"

  deploy_to_k8s:
    description: "Deploys a previously built Docker image to staging/production k8s environment"
    parameters:
      env:
        type: string
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.env >>

      - deploy:
          name: rolling update image to << parameters.env >>
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

jobs:
  build:
    docker:
      - image: *node_version
    steps:
      - checkout
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run: NODE_ENV=production npm run build
  lint:
    docker:
      - image: *node_version
    steps:
      - checkout
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run: mkdir reports
      - run:
          name: npm run lint
          command: |
            npm run circle:lint
          when: always
      - store_test_results:
          path: reports
      - store_artifacts:
          path: ./reports/eslint/eslint.xml
  unit_test:
    docker:
      - image: *node_version
    steps:
      - checkout
      - *restore_cache
      - *install_dependencies
      - run: npm install mocha-junit-reporter # just for CircleCI
      - *save_cache
      - run: mkdir reports
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: notify code climate
          command: |
            ./cc-test-reporter before-build
          when: always
      - run:
          name: npm test
          command: |
            npm run circle:coverage
          when: always
      - run:
          name: upload coverage to coveralls
          command: |
            npm run circle:coveralls
          when: always
      - run:
          name: upload coverage to code climate
          command: |
            ./cc-test-reporter after-build
          when: always
      - store_test_results:
          path: reports
      - store_artifacts:
          path: ./reports/mocha/test-results.xml
      - store_artifacts:
          path: coverage

  build_staging:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "staging"

  deploy_staging:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "staging"

  build_production:
    <<: *cloud_container
    steps:
      - build_for_k8s:
         env: "production"

  deploy_production:
    <<: *cloud_container
    steps:
      - deploy_to_k8s:
         env: "production"

workflows:
  pecs-frontend:
    jobs:
      - build
      - lint
      - unit_test
      - build_staging:
          requires:
            - build
            - lint
            - unit_test
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - build_staging
      - hold_production:
          type: approval
          requires:
            - build
            - lint
            - unit_test
          filters:
            branches:
              only: master
      - build_production:
          requires:
            - hold_production
      - deploy_production:
          requires:
            - build_production
