version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  hmpps: ministryofjustice/hmpps@2.2.0

aliases:
  # Shared containers
  - &circle_container
    docker:
      - image: circleci/node:14.14.0-browsers
  - &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: book-a-secure-move
  # Common steps
  - &install_dependencies
    run:
      name: Install NPM dependencies
      command: npm install && npm rebuild node-sass
  - &restore_cache
    restore_cache:
      name: Restore NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
  - &save_cache
    save_cache:
      name: Save NPM cache
      key: dependency-cache-{{ checksum "package.json" }}
      paths:
        - ./node_modules
  - &set_package_version
    run:
      name: Set version
      command: |
        echo "export PACKAGE_VERSION=$(grep -m1 version package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')" >> $BASH_ENV
  - &notify_slack_on_failure
    slack/notify-on-failure:
      only_for_branches: master
  - &notify_slack_on_release_start
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      title: 'Frontend v${PACKAGE_VERSION} is being prepared for release :building_construction:'
      title_link: 'https://github.com/ministryofjustice/hmpps-book-secure-move-frontend/blob/master/CHANGELOG.md'
      message: A new release was created by ${CIRCLE_USERNAME}
      footer: Click the title to view the changes
      include_project_field: false
      include_job_number_field: false
      include_visit_job_action: false
      color: '#1d70b8'
      mentions: here
  - &notify_slack_of_approval
    slack/approval:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      message: 'Frontend v${PACKAGE_VERSION} *requires your approval* before it can be deployed :eyes:'
      include_project_field: false
      include_job_number_field: false
      color: '#912b88'
      mentions: $BUILD_NOTIFICATIONS_MENTION_ID
  - &notify_slack_on_release_end
    slack/notify:
      channel: $BUILD_NOTIFICATIONS_CHANNEL_ID
      title: 'Frontend v${PACKAGE_VERSION} has been deployed :rocket:'
      title_link: https://github.com/ministryofjustice/hmpps-book-secure-move-frontend/releases/tag/v${PACKAGE_VERSION}
      message: This release was successfully deployed to production
      footer: Click the title to view the release notes
      include_project_field: false
      include_job_number_field: false
      include_visit_job_action: false
      color: '#28a197'
      mentions: here
  # Common filters
  - &all_tags
    filters:
      tags:
        only: /.*/
  - &only_master
    filters:
      branches:
        only: master
  - &ignore_master
    filters:
      branches:
        ignore: master
  - &only_master_and_tags
    filters:
      tags:
        only: /.*/
      branches:
        only: master
  - &only_deploy_tags
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/
  - &requires_production_approval
    requires:
      - approval

jobs:
  notify-of-approval:
    <<: *circle_container
    steps:
      - checkout
      - *set_package_version
      - *notify_slack_of_approval

  lint-and-unit-test:
    <<: *circle_container
    steps:
      - checkout
      - *set_package_version
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Lint the code
          command: npm run circle:lint
      - run:
          name: Setup Code Climate test-reporter
          # download test reporter as a static binary
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-0.8.0-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Notify CodeClimate before build
          command: |
            ./cc-test-reporter before-build
          when: always
      - run:
          name: Run unit tests
          command: |
            npm run circle:coverage
      - run:
          name: Upload coverage to CodeClimate
          command: |
            ./cc-test-reporter after-build
          when: always
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: coverage
      - *notify_slack_on_failure

  end-to-end-test:
    <<: *circle_container
    resource_class: large
    steps:
      - checkout
      - *set_package_version
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Build assets and frameworks
          command: npm run build
      - run:
          name: Check whether to use mock server
          command: |
            if [ -n "$E2E_MOCK_AUTH" ]; then
              echo "export AUTH_PROVIDER_URL='http://localhost:3999'" >> $BASH_ENV
              echo "export NOMIS_ELITE2_API_URL='http://localhost:3999'" >> $BASH_ENV
              source $BASH_ENV
            fi
      - run:
          name: Run E2E tests (same instance)
          environment:
            REDIS_URL: ""
            SERVER_HOST: localhost:3000
            E2E_BASE_URL: http://localhost:3000
          command: |
            npm run test-e2e:ci-pre-flight
            npm run test-e2e:ci
      - store_test_results:
          path: reports/testcafe
      - store_artifacts:
          path: artifacts
      - *notify_slack_on_failure

  publish-release-to-github:
    <<: *circle_container
    steps:
      - checkout
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - run:
          name: Publish release to GitHub
          command: npm run release:github

  publish-release-to-sentry:
    <<: *circle_container
    parameters:
      sentry_env:
        type: string
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT
          environment:
            SENTRY_ENVIRONMENT: <<parameters.sentry_env>>

  build-docker-image:
    <<: *cloud_container
    parameters:
      uat:
        type: string
        default: ""
      staging:
        type: string
        default: ""
      preprod:
        type: string
        default: ""
      production:
        type: string
        default: ""
    steps:
      - checkout
      - *set_package_version
      - when:
          condition: <<parameters.production>>
          steps:
            - *notify_slack_on_release_start
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BUILD_NUM} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              --build-arg APP_BUILD_BRANCH=${CIRCLE_BRANCH} \
              -t app .
      - run:
          name: Login to ECR
          command: |
            $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
      - run:
          name: Push docker image to ECR
          command: |
            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
      - when:
          condition: <<parameters.staging>>
          steps:
            - run:
                name: Push staging docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:staging.latest"
      - when:
          condition: <<parameters.uat>>
          steps:
            - run:
                name: Push staging docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:uat.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:uat.latest"
      - when:
          condition: <<parameters.preprod>>
          steps:
            - run:
                name: Push preproduction docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:preprod.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:preprod.latest"
      - when:
          condition: <<parameters.production>>
          steps:
            - run:
                name: Push production docker image to ECR
                command: |
                  docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"
                  docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

  deploy:
    <<: *cloud_container
    parameters:
      env:
        type: string
      notify_slack:
        type: string
        default: ""
    steps:
      - checkout
      - *set_package_version
      - run:
          name: Set k8s context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.env >>
      - deploy:
          name: Deploy image to << parameters.env >>
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n hmpps-book-secure-move-frontend-<< parameters.env >> \
                    deployment/hmpps-book-secure-move-frontend-deployment-<< parameters.env >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"
      - when:
          condition: <<parameters.notify_slack>>
          steps:
            - *notify_slack_on_release_end

workflows:
  continuous-deployment:
    jobs:
      # Tests
      - lint-and-unit-test:
          <<: *all_tags
      - end-to-end-test:
          <<: *ignore_master
          name: end-to-end-test-pr
      - end-to-end-test:
          <<: *only_master
          name: end-to-end-test-master
      - end-to-end-test:
          <<: *only_deploy_tags
          name: end-to-end-test-release
      - hmpps/helm_lint:
          name: helm_lint
          env: 'staging'
      # Docker builds
      - build-docker-image:
          <<: *only_master
          name: build-docker-image-master
      - build-docker-image:
          <<: *only_deploy_tags
          name: build-docker-image-release
          uat: 'true'
          preprod: 'true'
          production: 'true'
      # Deployment
      - deploy:
          <<: *only_master
          name: deploy-staging
          env: 'staging'
          requires:
            - build-docker-image-master
            - end-to-end-test-master
            - lint-and-unit-test
      - deploy:
          <<: *only_deploy_tags
          name: deploy-preproduction
          env: 'preprod'
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      - deploy:
          <<: *only_deploy_tags
          name: deploy-uat
          env: 'uat'
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      - deploy:
          <<: *only_deploy_tags
          <<: *requires_production_approval
          name: deploy-production
          env: 'production'
          notify_slack: 'true'
      # Production approval
      - approval:
          <<: *only_deploy_tags
          type: approval
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      - notify-of-approval:
          <<: *only_deploy_tags
          requires:
            - build-docker-image-release
            - end-to-end-test-release
            - lint-and-unit-test
      # Post release
      - publish-release-to-github:
          <<: *only_deploy_tags
          <<: *requires_production_approval
      - publish-release-to-sentry:
          <<: *only_master
          name: publish-release-to-sentry-staging
          sentry_env: staging
          requires:
            - deploy-staging
      - publish-release-to-sentry:
          <<: *only_deploy_tags
          name: publish-release-to-sentry-uat
          sentry_env: uat
          requires:
            - deploy-uat
      - publish-release-to-sentry:
          <<: *only_deploy_tags
          name: publish-release-to-sentry-preprod
          sentry_env: preproduction
          requires:
            - deploy-preproduction
      - publish-release-to-sentry:
          <<: *only_deploy_tags
          name: publish-release-to-sentry-production
          sentry_env: production
          requires:
            - deploy-production
