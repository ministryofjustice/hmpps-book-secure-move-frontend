name: Branch Based Deploy Cleanup

on:
  pull_request:
    types:
      - closed
    branches:
      - main

# Environment variables available to all jobs and steps in this workflow
env:
  KUBE_CACERT: ${{ secrets.KUBE_CACERT }}
  KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
  KUBE_NAME: ${{ secrets.KUBE_NAME }}
  KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
  KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}

  GITHUB_TEAM_NAME_SLUG: book-a-secure-move

jobs:
  setup-build-publish-deploy:
    name: Cleanup Deploy
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Authenticate with cluster
        run: |
          echo -n $KUBE_CACERT | base64 -d > ./ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials circleci --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=circleci --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Delete kube configs
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          kubectl delete configmap hmpps-book-secure-move-frontend-configmap-pr-$PR_NUMBER
          kubectl delete ingress hmpps-book-secure-move-frontend-ingress-pr-$PR_NUMBER
          kubectl delete service hmpps-book-secure-move-frontend-service-pr-$PR_NUMBER
          kubectl delete deployment hmpps-book-secure-move-frontend-deployment-pr-$PR_NUMBER

      - name: Delete deployments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BRANCH_BASED_DEPLOY_TOKEN }}
          script: |
            let deployments = (
              await github.rest.repos.listDeployments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment: "booksecuremove-pr-${{ github.event.number }}",
              })
            ).data;

            deployments = (await Promise.all(
              deployments.map(async (d) => {
                const lastState = (
                  await github.rest.repos.listDeploymentStatuses({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    deployment_id: d.id,
                  })
                ).data[0].state;
                if (lastState == "inactive") return;

                return d;
              })
            )).filter(d => d);

            await Promise.all(
              deployments.map(d => {
                return github.rest.repos.createDeploymentStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: d.id,
                  state: "inactive",
                });
              })
            );
